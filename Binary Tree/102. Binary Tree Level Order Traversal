/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
   /* void solve(TreeNode* root, int lev, vector<vector<int>> &ans){
        if(root==NULL)
            return;
        if(ans.size()<=lev)
            ans.resize(ans.size()+1);
        ans[lev].push_back(root->val);
        solve(root->left, lev+1,ans);
        solve(root->right, lev+1,ans);
        
    }*/
    
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> ans;
        //solve(root, 0,ans); //using recursion
        if(root==NULL)
            return ans;
        queue<TreeNode*> q; 
        q.push(root);
        while(!q.empty()){
            vector<int> curr;
            int size = q.size();
            for(int i=0;i<size;i++){
                auto node = q.front();
                q.pop();
                curr.push_back(node->val);
                if(node->left)
                    q.push(node->left);
                if(node->right)
                    q.push(node->right);
            }
            ans.push_back(curr);
        }
        return ans;
    }
};
